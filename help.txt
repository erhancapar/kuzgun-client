index.html:

<!-- index.html -->
<!DOCTYPE html>
<html lang="tr">
    <head>
        <meta charset="UTF-8" />
        <title>Kuzgun</title>
        <link rel="stylesheet" href="styles.css" />
    </head>
    <body
        class="bg-day text-black dark:bg-night dark:text-text-dark flex items-center justify-center h-screen relative"
        id="body"
    >
        <!-- Tema Değiştirme Butonu -->
        <button
            id="theme-toggle"
            class="absolute top-4 right-4 bg-gray-300 dark:bg-gray-700 p-2 rounded-full focus:outline-none"
        >
            <img
                src="icons/moon.svg"
                alt="Tema Değiştir"
                id="theme-icon"
                class="w-6 h-6"
            />
        </button>

        <!-- İçerik -->
        <div class="text-center">
            <h1 class="text-4xl font-bold mb-8 mt-[-50px]" id="welcome-text">
                Welcome to Kuzgun!
            </h1>
            <div class="flex justify-center space-x-4">
                <button
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                    id="register-button"
                >
                    Register
                </button>
                <button
                    class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
                    id="login-button"
                >
                    Login
                </button>
            </div>
            <!-- Yeni buton benzeri metin -->
            <div class="mt-4">
                <button
                    class="text-gray-500 dark:text-text-dark hover:underline focus:outline-none"
                    id="self-hosted-button"
                >
                    Continue to Kuzgun Self-Hosted without an account
                </button>
            </div>
        </div>

        <!-- JavaScript -->
        <script>
            const { ipcRenderer } = require("electron");
            let isDay = true;

            const body = document.getElementById("body");
            const welcomeText = document.getElementById("welcome-text");
            const themeToggle = document.getElementById("theme-toggle");
            const themeIcon = document.getElementById("theme-icon");
            const selfHostedButton =
                document.getElementById("self-hosted-button");
            const loginButton = document.getElementById("login-button");
            const registerButton = document.getElementById("register-button");

            function updateTheme(isDay) {
                if (isDay) {
                    document.documentElement.classList.remove("dark");
                    themeIcon.src = "icons/moon.svg";
                } else {
                    document.documentElement.classList.add("dark");
                    themeIcon.src = "icons/sun.svg";
                }
            }

            // Ana süreçten tema güncelleme mesajını dinle
            ipcRenderer.on("theme-updated", (event, theme) => {
                updateTheme(theme);
            });

            // Handle logout message
            ipcRenderer.on("logged-out", () => {
                showLoggedOutMessage();
            });

            function showLoggedOutMessage() {
                const messageDiv = document.createElement("div");
                messageDiv.textContent = "Successfully logged out";

                // Add Tailwind CSS classes for styling
                messageDiv.classList.add(
                    "fixed",
                    "bottom-10",
                    "left-1/2",
                    "transform",
                    "-translate-x-1/2",
                    "px-6",
                    "py-3",
                    "rounded-lg",
                    "shadow-lg",
                    "text-white",
                    "bg-black",
                    "bg-opacity-70",
                    "backdrop-filter",
                    "backdrop-blur-sm",
                    "flex",
                    "items-center",
                    "justify-center",
                    "text-base",
                    "font-medium"
                );

                document.body.appendChild(messageDiv);

                // Remove the message after 3 seconds
                setTimeout(() => {
                    messageDiv.remove();
                }, 3000);
            }

            // Tema değiştirme butonuna tıklama olayı
            themeToggle.addEventListener("click", () => {
                ipcRenderer.send("toggle-theme");
            });

            // Login butonuna tıklama olayı
            loginButton.addEventListener("click", () => {
                ipcRenderer.send("navigate", "login");
            });

            // Register butonuna tıklama olayı
            registerButton.addEventListener("click", () => {
                ipcRenderer.send("navigate", "register");
            });

            // Sayfa yüklendiğinde mevcut temayı talep et
            window.onload = () => {
                ipcRenderer.send("request-theme");
            };
        </script>
    </body>
</html>

login.html:

<!-- login.html -->
<!DOCTYPE html>
<html lang="tr">
    <head>
        <meta charset="UTF-8" />
        <title>Login - Kuzgun</title>
        <link rel="stylesheet" href="styles.css" />
    </head>
    <body
        class="bg-day text-black dark:bg-night dark:text-text-dark flex items-center justify-center h-screen"
        id="body"
    >
        <!-- Tema Değiştirme Butonu -->
        <button
            id="theme-toggle"
            class="absolute top-4 right-4 bg-gray-300 dark:bg-gray-700 p-2 rounded-full focus:outline-none"
        >
            <img
                src="icons/moon.svg"
                alt="Toggle Theme"
                id="theme-icon"
                class="w-6 h-6"
            />
        </button>

        <div class="w-full max-w-md">
            <h1 class="text-2xl font-bold mb-6 text-center" id="login-title">
                Log in to your Kuzgun Account
            </h1>
            <form
                id="login-form"
                class="bg-div-light-bg dark:bg-div-dark-bg shadow-md rounded px-8 pt-6 pb-8 mb-4"
            >
                <!-- Email Field -->
                <div class="mb-4">
                    <label
                        class="block text-gray-700 dark:text-text-dark text-sm font-bold mb-2"
                        for="email"
                    >
                        Email
                    </label>
                    <input
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-black dark:text-text-dark bg-input-light-bg dark:bg-input-dark-bg leading-tight focus:outline-none focus:shadow-outline"
                        id="email"
                        type="email"
                        placeholder="name@mail.com"
                        required
                    />
                </div>
                <!-- Password Field -->
                <div class="mb-6">
                    <label
                        class="block text-gray-700 dark:text-text-dark text-sm font-bold mb-2"
                        for="password"
                    >
                        Password
                    </label>
                    <input
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-black dark:text-text-dark bg-input-light-bg dark:bg-input-dark-bg mb-3 leading-tight focus:outline-none focus:shadow-outline"
                        id="password"
                        type="password"
                        placeholder="********"
                        required
                    />
                    <p
                        class="text-border-error-light dark:text-border-error-dark text-xs italic hidden"
                        id="password-error"
                    >
                        Password must be at least 8 characters.
                    </p>
                </div>
                <!-- Login and Forgot Password Buttons -->
                <div class="flex items-center justify-between">
                    <button
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                        type="submit"
                    >
                        Log In
                    </button>
                    <button
                        class="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800 focus:outline-none"
                        id="forgot-password-button"
                        type="button"
                    >
                        Forgot Password?
                    </button>
                </div>
                <!-- Error Message -->
                <p
                    class="text-border-error-light dark:text-border-error-dark text-xs italic mt-4 hidden"
                    id="login-error"
                >
                    Incorrect email or password.
                </p>
            </form>

            <!-- 'Back to Welcome Page' button -->
            <div class="text-center mt-4">
                <button
                    class="text-blue-500 hover:underline focus:outline-none"
                    id="back-button"
                >
                    Back to Welcome Page
                </button>
            </div>
        </div>

        <!-- JavaScript -->
        <script>
            const { ipcRenderer } = require("electron");

            const form = document.getElementById("login-form");
            const emailInput = document.getElementById("email");
            const passwordInput = document.getElementById("password");
            const passwordError = document.getElementById("password-error");
            const loginError = document.getElementById("login-error");
            const backButton = document.getElementById("back-button");
            const forgotPasswordButton = document.getElementById(
                "forgot-password-button"
            );
            const themeToggle = document.getElementById("theme-toggle");
            const themeIcon = document.getElementById("theme-icon");
            const body = document.getElementById("body");
            const loginTitle = document.getElementById("login-title");

            form.addEventListener("submit", function (e) {
                e.preventDefault();

                const email = emailInput.value.trim();
                const password = passwordInput.value;

                // Basic validation
                let valid = true;

                if (!email) {
                    emailInput.classList.add("input-error");
                    valid = false;
                } else {
                    emailInput.classList.remove("input-error");
                }

                if (password.length < 8) {
                    passwordInput.classList.add("input-error");
                    passwordError.classList.remove("hidden");
                    valid = false;
                } else {
                    passwordInput.classList.remove("input-error");
                    passwordError.classList.add("hidden");
                }

                if (!valid) {
                    return;
                }

                // Send login request
                const loginData = {
                    email: email,
                    password: password,
                };

                fetch("http://195.174.137.28:3000/api/users/login", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(loginData),
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.token) {
                            // Successful login
                            ipcRenderer.send("login-success", data);
                        } else if (data.msg === "credentials_wrong") {
                            // Incorrect credentials
                            loginError.textContent =
                                "Incorrect email or password.";
                            loginError.classList.remove("hidden");
                        } else {
                            // Other errors
                            loginError.textContent =
                                "An unexpected error occurred. Please try again.";
                            loginError.classList.remove("hidden");
                        }
                    })
                    .catch((error) => {
                        console.error("Error:", error);
                        loginError.textContent =
                            "Network error. Please check your connection.";
                        loginError.classList.remove("hidden");
                    });
            });

            backButton.addEventListener("click", () => {
                ipcRenderer.send("navigate", "index");
            });

            forgotPasswordButton.addEventListener("click", () => {
                ipcRenderer.send("navigate", "forgot-password");
            });

            // Tema değiştirme ve güncelleme işlemleri
            function updateTheme(isDay) {
                if (isDay) {
                    document.documentElement.classList.remove("dark");
                    themeIcon.src = "icons/moon.svg";
                } else {
                    document.documentElement.classList.add("dark");
                    themeIcon.src = "icons/sun.svg";
                }
            }

            // Ana süreçten gelen tema güncelleme mesajını dinle
            ipcRenderer.on("theme-updated", (event, isDay) => {
                updateTheme(isDay);
            });

            // Tema değiştirme butonuna tıklama olayı
            themeToggle.addEventListener("click", () => {
                ipcRenderer.send("toggle-theme");
            });

            // Sayfa yüklendiğinde mevcut temayı talep et
            window.onload = () => {
                ipcRenderer.send("request-theme");
            };
        </script>
    </body>
</html>

main.js:

// main.js
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');

let win;
let isDay = true;

(async () => {
  // Dynamically import 'electron-store' as it's an ES Module
  const { default: Store } = await import('electron-store');
  const store = new Store();
  isDay = store.get('theme', true);

  function createWindow() {
    win = new BrowserWindow({
      width: 1280,
      height: 720,
      webPreferences: {
        nodeIntegration: true,
        contextIsolation: false,
      },
    });

    // Determine the starting page based on token existence
    const startPage = getStartingPage();

    win.loadFile(startPage);

    win.webContents.on('did-finish-load', () => {
      win.webContents.send('theme-updated', isDay);

      if (store.has('user') && startPage.includes('welcome.html')) {
        const user = store.get('user');
        win.webContents.send('user-data', user.username);
      }
    });
  }

  // Function to determine the starting page
  function getStartingPage() {
    if (store.has('token')) {
      // Since we don't have token validation yet, assume token is valid
      return 'public/welcome.html';
    } else {
      // No token found
      return 'public/index.html';
    }
  }

  // Handle theme toggle
  ipcMain.on('toggle-theme', (event) => {
    isDay = !isDay;
    store.set('theme', isDay);
    win.webContents.send('theme-updated', isDay);
  });

  // Handle theme request from renderer process
  ipcMain.on('request-theme', (event) => {
    event.sender.send('theme-updated', isDay);
  });

  // Handle navigation
  ipcMain.on('navigate', (event, arg) => {
    const validPages = ['login', 'index', 'forgot-password', 'register', 'welcome'];
    if (validPages.includes(arg)) {
      win.loadFile(`public/${arg}.html`);

      win.webContents.once('did-finish-load', () => {
        win.webContents.send('theme-updated', isDay);

        if (arg === 'welcome' && store.has('user')) {
          const user = store.get('user');
          win.webContents.send('user-data', user.username);
        }
      });
    }
  });

  // Handle successful registration
  ipcMain.on('register-success', (event, data) => {
    store.set('token', data.token);
    store.set('user', data.user);
    win.loadFile('public/welcome.html');

    win.webContents.once('did-finish-load', () => {
      win.webContents.send('user-data', data.user.username);
      win.webContents.send('theme-updated', isDay);
    });
  });

  // Handle successful login
  ipcMain.on('login-success', (event, data) => {
    store.set('token', data.token);
    store.set('user', data.user);
    win.loadFile('public/welcome.html');

    win.webContents.once('did-finish-load', () => {
      win.webContents.send('user-data', data.user.username);
      win.webContents.send('theme-updated', isDay);
    });
  });

  // Handle logout
  ipcMain.on('logout', (event) => {
    store.delete('token');
    store.delete('user');
    win.loadFile('public/index.html');

    win.webContents.once('did-finish-load', () => {
      win.webContents.send('logged-out');
      win.webContents.send('theme-updated', isDay);
    });
  });

  // Handle request for user data from renderer process
  ipcMain.on('request-user-data', (event) => {
    if (store.has('user')) {
      const user = store.get('user');
      event.sender.send('user-data', user.username);
    }
  });

  app.whenReady().then(createWindow);

  app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
      app.quit();
    }
  });

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
})();

